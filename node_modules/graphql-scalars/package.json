{
  "_args": [
    [
      {
        "raw": "graphql-scalars",
        "scope": null,
        "escapedName": "graphql-scalars",
        "name": "graphql-scalars",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\lakag\\Documents\\SOS\\sosweb"
    ]
  ],
  "_from": "graphql-scalars",
  "_hasShrinkwrap": false,
  "_id": "graphql-scalars@1.0.0",
  "_location": "/graphql-scalars",
  "_nodeVersion": "10.16.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/graphql-scalars_1.0.0_1565270178790_0.1802591954577435"
  },
  "_npmUser": {
    "name": "ardatan",
    "email": "ardatanrikulu@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "graphql-scalars",
    "scope": null,
    "escapedName": "graphql-scalars",
    "name": "graphql-scalars",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/graphql-scalars/-/graphql-scalars-1.0.0.tgz",
  "_shasum": "49a2227960506033b7ed4d83731319f06ece0ac0",
  "_shrinkwrap": null,
  "_spec": "graphql-scalars",
  "_where": "C:\\Users\\lakag\\Documents\\SOS\\sosweb",
  "bugs": {
    "url": "https://github.com/Urigo/graphql-scalars/issues"
  },
  "dependencies": {
    "graphql-type-json": "0.3.0"
  },
  "description": "A collection of scalar types not included in base GraphQL.",
  "devDependencies": {
    "@types/graphql": "14.2.3",
    "@types/jest": "24.0.17",
    "graphql": "14.4.2",
    "jest": "24.8.0",
    "lint-staged": "9.2.1",
    "semver": "6.3.0",
    "ts-jest": "24.0.2",
    "tslint": "5.18.0",
    "typescript": "3.5.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-M4BRfD4UWBU7aX0c6OEiPK22u/AWsdASlloTU6uJ1JgoAPbVLWUiw7tVzZAvRxA1GhQLU4pWdQ1nno+cftPReg==",
    "shasum": "49a2227960506033b7ed4d83731319f06ece0ac0",
    "tarball": "https://registry.npmjs.org/graphql-scalars/-/graphql-scalars-1.0.0.tgz",
    "fileCount": 204,
    "unpackedSize": 421973,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdTCCjCRA9TVsSAnZWagAAx7YP/3VIOp20NxiVKd2Abnlj\nWgeuEG+pc2ylbLib4fSBpjQDRl/mlzNTMRa67mN0Hf8vpp+/QRMmbMXGuLDR\n6trYIixUw788YKYMpITH+MK2ML6fBI/V/+qY6jbiTe06fL2JDZAITeYh0M2e\ndubG/mfxVxDbplM0xtZTaFru8xUeiick9nFwj/vRPNS9NcvzIdk3n4n8M3xS\nNnNrEm7i150aRW8FlPaMwKu053j7d6pPXm51J1pPCkYiLDK5Iggg1klxvjSZ\nxmGMzvB10pa/ObvDVDKk3wIZPobvgH3kQj5tDHjFlezCe/kJYNCLkSzlIaza\n7zsZGHfYpAySXNPKb4MWKSpcM68UPPbMaKcmVgi/lY5nueRXgJLbITL4QSmb\nybSsSUPkyHdMk8Y1sE7iw1XH7TfpZpWY4zW0OkAZlg9vg8jzB1RyH4fW7RB7\n2CSwLqypdRIJ+9+VgDdXkLc2Pce082dT8Js82tE1K+RGxKsmkKZdC6+jOq3b\n2y0VA9N9Z3g5fACdV0PdneV7DXQmcyX9EdfWew4N6dnrliSvbIoDHORSinNi\nkvgoI2OCJ8NkgF0cz1aV3lRix/tZboM3Hn0Vp2K+NokpXN6B6kHGMTM2yvDd\nYmHGCmOOZy/zO6Sc7MybQWRxsz0sMySlIkIcCkw5C6JdGrLCcdkSDJa6VvLU\nJUrw\r\n=Cn6O\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "c3b5aeb5a082d74dd5f51300d902fa37b4804d68",
  "homepage": "https://github.com/Urigo/graphql-scalars#readme",
  "jest": {
    "roots": [
      "src"
    ]
  },
  "license": "MIT",
  "lint-staged": {
    "*.{ts,tsx}": [
      "tslint --fix",
      "git add"
    ],
    "*.{js,json,css,md,ts,tsx}": [
      "prettier --write",
      "git add -f"
    ]
  },
  "main": "dist/commonjs/index.js",
  "maintainers": [
    {
      "name": "adriano.digiovanni",
      "email": "me@adrianodigiovanni.com"
    },
    {
      "name": "ardatan",
      "email": "ardatanrikulu@gmail.com"
    },
    {
      "name": "dotansimha",
      "email": "dotansimha@gmail.com"
    },
    {
      "name": "kamilkisiela",
      "email": "kamil.kisiela@gmail.com"
    },
    {
      "name": "urigo",
      "email": "uri.goldshtein@gmail.com"
    }
  ],
  "module": "dist/esnext/index.js",
  "name": "graphql-scalars",
  "optionalDependencies": {},
  "peerDependencies": {
    "graphql": "^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0"
  },
  "prettier": {
    "singleQuote": true,
    "trailingComma": "all",
    "printWidth": 80
  },
  "readme": "# graphql-scalars\n\n[![npm version](https://badge.fury.io/js/graphql-scalars.svg)](https://badge.fury.io/js/graphql-scalars)\n[![CircleCI](https://circleci.com/gh/Urigo/graphql-scalars.svg?style=svg)](https://circleci.com/gh/Urigo/graphql-scalars)\n\n> A library of custom GraphQL [scalar types](http://graphql.org/learn/schema/#scalar-types) for creating precise type-safe GraphQL schemas.\n\n## Installation\n\n```\nnpm install --save graphql-scalars\n```\n\nor\n\n```\nyarn add graphql-scalars\n```\n\n## Usage\n\nTo use these scalars you'll need to add them in two places, your schema and your resolvers map.\n\nNOTE: The new `RegularExpression` scalar will be used a little differently and is explained below.\n\nIn your schema:\n\n```graphql\nscalar DateTime\n\nscalar EmailAddress\n\nscalar NegativeFloat\n\nscalar NegativeInt\n\nscalar NonNegativeFloat\n\nscalar NonNegativeInt\n\nscalar NonPositiveFloat\n\nscalar NonPositiveInt\n\nscalar PhoneNumber\n\nscalar PositiveFloat\n\nscalar PositiveInt\n\nscalar PostalCode\n\nscalar UnsignedFloat\n\nscalar UnsignedInt\n\nscalar URL\n\nscalar BigInt\n\nscalar Long\n\nscalar GUID\n\nscalar HexColorCode\n\nscalar HSL\n\nscalar HSLA\n\nscalar IPv4\n\nscalar IPv6\n\nscalar ISBN\n\nscalar MAC\n\nscalar Port\n\nscalar RGB\n\nscalar RGBA\n\nscalar USCurrency\n\nscalar JSON\n\nscalar JSONObject\n```\n\nIn your resolver map, first import them:\n\n```javascript\nimport {\n  DateTimeResolver,\n  EmailAddressResolver,\n  NegativeFloatResolver,\n  NegativeIntResolver,\n  NonNegativeFloatResolver,\n  NonNegativeIntResolver,\n  NonPositiveFloatResolver,\n  NonPositiveIntResolver,\n  PhoneNumberResolver,\n  PositiveFloatResolver,\n  PositiveIntResolver,\n  PostalCodeResolver,\n  UnsignedFloatResolver,\n  UnsignedIntResolver,\n  URLResolver,\n  BigIntResolver,\n  LongResolver,\n  GUIDResolver,\n  HexColorCodeResolver,\n  HSLResolver,\n  HSLAResolver,\n  IPv4Resolver,\n  IPv6Resolver,\n  ISBNResolver,\n  MACResolver,\n  PortResolver,\n  RGBResolver,\n  RGBAResolver,\n  USCurrencyResolver,\n  JSONResolver,\n  JSONObjectResolver,\n} from 'graphql-scalars';\n```\n\nThen make sure they're in the root resolver map like this:\n\n```javascript\nconst myResolverMap = {\n  DateTime: DateTimeResolver,\n\n  NonPositiveInt: NonPositiveIntResolver,\n  PositiveInt: NonPositiveIntResolver,\n  NonNegativeInt: NonPositiveIntResolver,\n  NegativeInt: NegativeIntResolver,\n\n  NonPositiveFloat: NonPositiveFloatResolver,\n  PositiveFloat: PositiveFloatResolver,\n  NonNegativeFloat: NonNegativeFloatResolver,\n  NegativeFloat: NegativeFloatResolver,\n\n  EmailAddress: EmailAddressResolver,\n  URL: URLResolver,\n\n  PhoneNumber: PhoneNumberResolver,\n  PostalCode: PostalCodeResolver,\n\n  Query: {\n    // more stuff here\n  },\n\n  Mutation: {\n    // more stuff here\n  },\n};\n```\n\nNOTE: `NonNegativeFloat` and `NonNegativeInt` are also available under the aliases `UnsignedFloat`\nand `UnsignedInt`, respectively.\n\nAlternatively, use the default import and ES6's spread operator syntax:\n\n```javascript\nimport { resolvers } from 'graphql-scalars';\n```\n\nThen make sure they're in the root resolver map like this:\n\n```javascript\nconst myResolverMap = {\n  ...resolvers,\n\n  Query: {\n    // more stuff here\n  },\n\n  Mutation: {\n    // more stuff here\n  },\n};\n```\n\nThat's it. Now you can use these scalar types in your schema definition like this:\n\n```graphql\ntype Person {\n  birthDate: DateTime\n  ageInYears: PositiveInt\n\n  heightInInches: PositiveFloat\n\n  minimumHourlyRate: NonNegativeFloat\n\n  currentlyActiveProjects: NonNegativeInt\n\n  email: EmailAddress\n  homePage: URL\n\n  phoneNumber: PhoneNumber\n  homePostalCode: PostalCode\n}\n```\n\nThese scalars can be used just like the base, built-in ones.\n\n### Usage with Apollo Server\n\n```javascript\nimport { ApolloServer } from 'apollo-server';\nimport { makeExecutableSchema } from 'graphql-tools';\n// import all scalars and resolvers\nimport { typeDefs, resolvers } from 'graphql-scalars';\n// Alternatively, import individual scalars and resolvers\n// import { DateTimeResolver, DateTimeTypeDefinition, ... } from \"graphql-scalars\"\n\nconst server = new ApolloServer({\n  schema: makeExecutableSchema({\n    typeDefs: [\n      // use spread syntax to add scalar definitions to your schema\n      ...typeDefs,\n      // DateTimeScalar,\n      // ...\n      // ... other type definitions ...\n    ],\n    resolvers: {\n      // use spread syntax to add scalar resolvers to your resolver map\n      ...resolvers,\n      // DateTime,\n      // ...\n      // ... remainder of resolver map ...\n    },\n  }),\n});\n\nserver.listen().then(({ url }) => {\n  console.log(`ðŸš€ Server ready at ${url}`);\n});\n```\n\n### Using mocks with Apollo Server\n\n```javascript\nimport { ApolloServer } from 'apollo-server';\nimport { makeExecutableSchema } from 'graphql-tools';\n// import all scalars and resolvers\nimport { typeDefs, resolvers, mocks } from 'graphql-scalars';\n// Alternatively, import individual scalars and resolvers\n// import { DateTimeResolver, DateTimeTypeDefinition, DateTimeMock, ... } from \"graphql-scalars\"\n\nconst server = new ApolloServer({\n  schema: makeExecutableSchema({\n    typeDefs: [\n      // use spread syntax to add scalar definitions to your schema\n      ...typeDefs,\n      // DateTimeScalar,\n      // ...\n      // ... other type definitions ...\n    ],\n    resolvers: {\n      // use spread syntax to add scalar resolvers to your resolver map\n      ...resolvers,\n      // DateTime,\n      // ...\n      // ... remainder of resolver map ...\n    },\n  }),\n});\n```\n\n\n### Using the RegularExpression scalar\n\nFirst an explanation: To create a new scalar type to the GraphQL schema language, you must create an\ninstance of a new `GraphQLScalarType` object that implements three general functions/methods:\n`serialize`, `parseValue` and `parseLiteral` which are used at different stages of processing your\nGraphQL types during queries and mutations. So creating a new scalar looks like this:\n\n```javascript\nconst MyScalar = new GraphQLScalarType({\n    'MyScalar',\n\n    description: 'A description of my scalar',\n\n    serialize(value) {\n      // ...\n      return value;\n    },\n\n    parseValue(value) {\n      // ...\n      return value;\n    },\n\n    parseLiteral(ast) {\n      // ...\n      return ast.value;\n    }\n  });\n```\n\nGiven this, if we want to create a new type that is essentially the same except for one little\ncustomizable aspect (e.g., a regular expression type that has all the same code except the regex is\ndifferent) then we need to dynamically _generate_ a new `GraphQLScalarType` object given some\nparameters. That's the approach we take here.\n\nTherefore the `RegularExpression` scalar type is really a `GraphQLScalarType` object _generator_\nthat takes two arguments:\n\n- a name\n- the regex you want it to use\n\nSo to create a new scalar for a given regex, you will do this:\n\n```javascript\nconst MyRegexType = new RegularExpression('MyRegexType', /^ABC$/);\n```\n\nNow `MyRegexType` is your new GraphQL scalar type that will enforce a value of, in this case, \"ABC\".\n\nAdd your new scalar type to your resolver map:\n\n```javascript\nexport default {\n  MyRegexType,\n};\n```\n\nAnd to your schema:\n\n```graphql\nscalar MyRegexType\n```\n\nThat's it. Now you can use `MyRegexType` as a type in the rest of your schema.\n\n#### RegularExpression options\n\nThere is an optional third `options` argument to the RegularExpression constructor that can be used like this:\n\n```javascript\nconst options = {\n  errorMessage: (regex, value) => {\n    if (process.env.NODE_ENV === 'production')\n      return `Value is invalid format: ${value} `;\n    else\n      return `Value does not match the regular expression ${regex}: ${value}`;\n  },\n};\n\nconst MyRegexType = new RegularExpression('MyRegexType', /^ABC$/, options);\n```\n\n## Why?\n\nThe primary purposes these scalars, really of _all_ types are to:\n\n1.  Communicate to users of your schema exactly what they can expect or to at least _reduce_\n    ambiguity in cases where that's possible. For example if you have a `Person` type in your schema\n    and that type has as field like `ageInYears`, the value of that can only be null or a positive\n    integer (or float, depending on how you want your schema to work). It should never be zero or\n    negative.\n1.  Run-time type checking. GraphQL helps to tighten up the contract between client and server. It\n    does this with strong typing of the _interface_ (or _schema_). This helps us have greater\n    confidence about what we're receiving from the server and what the server is receiving from the\n    client.\n\nThis package adds to the base options available in GraphQL to support types that are reasonably\ncommon in defining schemas or interfaces to data.\n\n## The Types\n\n### DateTime\n\nUse real JavaScript Dates for GraphQL fields. Currently you can use a String or an Int (e.g., a\ntimestamp in milliseconds) to represent a date/time. This scalar makes it easy to be explicit about\nthe type and have a real JavaScript Date returned that the client can use _without_ doing the\ninevitable parsing or conversion themselves.\n\n### NonNegativeInt\n\nIntegers that will have a value of 0 or more. Uses [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt).\n\n### NonPositiveInt\n\nIntegers that will have a value of 0 or less. Uses [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt).\n\n### PositiveInt\n\nIntegers that will have a value greater than 0. Uses [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt).\n\n### NegativeInt\n\nIntegers that will have a value less than 0. Uses [`parseInt()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt).\n\n### NonNegativeFloat\n\nFloats that will have a value of 0 or more. Uses [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat).\n\n### NonPositiveFloat\n\nFloats that will have a value of 0 or less. Uses [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat).\n\n### PositiveFloat\n\nFloats that will have a value greater than 0. Uses [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat).\n\n### NegativeFloat\n\nFloats that will have a value less than 0. Uses [`parseFloat()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat).\n\n### EmailAddress\n\nA field whose value conforms to the standard internet email address format as specified in\n[RFC822](https://www.w3.org/Protocols/rfc822/).\n\n### URL\n\nA field whose value conforms to the standard URL format as specified in\n[RFC3986](https://www.ietf.org/rfc/rfc3986.txt), and it uses real JavaScript `URL` objects.\n\n### PhoneNumber\n\nA field whose value conforms to the standard E.164 format as specified in\n[E.164 specification](https://en.wikipedia.org/wiki/E.164). Basically this is `+17895551234`.\nThe very powerful\n[`libphonenumber` library](https://github.com/googlei18n/libphonenumber) is available to take\n_that_ format, parse and display it in whatever display format you want. It can also be used to\nparse user input and _get_ the E.164 format to pass _into_ a schema.\n\n### PostalCode\n\nWe're going to start with a limited set as suggested [here](http://www.pixelenvision.com/1708/zip-postal-code-validation-regex-php-code-for-12-countries/)\nand [here](https://stackoverflow.com/questions/578406/what-is-the-ultimate-postal-code-and-zip-regex).\n\nWhich gives us the following countries:\n\n- US - United States\n- UK - United Kingdom\n- DE - Germany\n- CA - Canada\n- FR - France\n- IT - Italy\n- AU - Australia\n- NL - Netherlands\n- ES - Spain\n- DK - Denmark\n- SE - Sweden\n- BE - Belgium\n- IN - India\n\nThis is really a practical decision of weight (of the package) vs. completeness.\n\nIn the future we might expand this list and use the more comprehensive list found [here](http://unicode.org/cldr/trac/browser/tags/release-26-0-1/common/supplemental/postalCodeData.xml).\n\n### BigInt\n\nThe `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent values between -(2^53) + 1 and 2^53 - 1.\n\n> Uses [graphql-bigint](https://github.com/stems/graphql-bigint)\n\n### GUID\n\nA field whose value is a generic [Globally Unique Identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).\n\n### Hexadecimal\n\nA field whose value is a [hexadecimal](https://en.wikipedia.org/wiki/Hexadecimal).\n\n### HexColorCode\n\nA field whose value is a [hex color code](https://en.wikipedia.org/wiki/Web_colors).\n\n### HSL\n\nA field whose value is a [CSS HSL color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#hsl()_and_hsla()).\n\n### IPv4\n\nA field whose value is a [IPv4 address](https://en.wikipedia.org/wiki/IPv4).\n\n### IPv6\n\nA field whose value is a [IPv6 address](https://en.wikipedia.org/wiki/IPv6).\n\n### ISBN\n\nA field whose value is a [ISBN-10 or ISBN-13 number](https://en.wikipedia.org/wiki/International_Standard_Book_Number).\n\n### MAC\n\nA field whose value is a IEEE 802 48-bit [MAC address](https://en.wikipedia.org/wiki/MAC_address).\n\n### Port\n\nA field whose value is a valid [TCP port](https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_ports) within the range of 0 to 65535.\n\n### RGB\n\nA field whose value is a [CSS RGB color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()).\n\n### RGBA\n\nA field whose value is a [CSS RGBA color](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba()).\n\n### USCurrency\n\nA US currency string, such as $21.25.\n\n> Uses [graphql-currency-scalars](https://github.com/abhiaiyer91/graphql-currency-scalars)\n\n### JSON\n\nThe `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\n> Uses [graphql-currency-scalars](https://github.com/abhiaiyer91/graphql-currency-scalars)\n\n### JSONObject\n\nThe `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).\n\n> Uses [graphql-type-json](https://github.com/taion/graphql-type-json)\n\n### RegularExpression\n\nA `GraphQLScalarType` object generator that takes two arguments:\n\n- `name` - The name of your custom type\n- `regex` - The regex to be used to check against any values for fields with this new type\n\n```\nconst MyRegexType = new RegularExpression('MyRegexType', /^ABC$/);\n```\n\n## What's this all about?\n\nGraphQL is a wonderful new approach to application data and API layers that's gaining momentum. If\nyou have not heard of it, start [here](http://graphql.org/learn/) and check out\n[Apollo](http://dev.apollodata.com/) also.\n\nHowever, for all of GraphQL's greatness. It is missing a couple things that we have (and you might)\nfind very useful in defining your schemas. Namely GraphQL has a\n[limited set of scalar types](http://graphql.org/learn/schema/#scalar-types) and we have found there\nare some additional scalar types that are useful in being more precise in our schemas. Thankfully,\nthose sharp GraphQL folks provided a simple way to add new custom scalar types if needed. That's\nwhat this package does.\n\n**NOTE:** We don't fault the GraphQL folks for these omissions. They have kept the core small and\nclean. Arguably not every project needs these additional scalar types. But _we_ have, and now _you_\ncan use them too if needed.\n\n## License\n\nReleased under the [MIT license](https://github.com/Urigo/graphql-scalars/blob/master/LICENSE).\n\n## Contributing\n\nIssues and Pull Requests are always welcome.\n\nPlease read our [contribution guidelines](https://github.com/Urigo/graphql-scalars/blob/master/CONTRIBUTING.md).\n\n## Thanks\n\nThis library was originally published as `@okgrow/graphql-scalars`.\nIt was created and maintained by the company `ok-grow`.\nWe, The Guild, took over the maintaince of that library [later on](https://medium.com/the-guild/the-guild-is-taking-over-maintenance-of-merge-graphql-schemas-so-lets-talk-about-graphql-schema-46246557a225).\n\nWe also like to say thank you to [@adriano-di-giovanni](https://github.com/adriano-di-giovanni) for being extremely generous and giving us the `graphql-scalars` name on npm which was previously owned by his own [library](https://github.com/adriano-di-giovanni/graphql-scalars).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Urigo/graphql-scalars.git"
  },
  "scripts": {
    "build": "tsc -m esnext --outDir dist/esnext && tsc -m commonjs --outDir dist/commonjs",
    "bundlesize": "yarn build && cd bundle-test/ && yarn && yarn test",
    "ci:release:canary": "node bump.js && npm publish --tag alpha --access public",
    "clean": "rm -rf dist",
    "prebuild": "yarn clean",
    "prepare-release": "yarn build && yarn test",
    "release": "yarn prepare-release && npm publish",
    "test": "jest --forceExit --runInBand && yarn bundlesize"
  },
  "sideEffects": false,
  "typescript": {
    "definition": "dist/esnext/index.d.ts"
  },
  "typings": "dist/esnext/index.d.ts",
  "version": "1.0.0"
}
